class localDb{constructor(t){this.name=t,this.mainDb=[],this.localDbName="lDark#4s5d"+this.name+"key2sd55",this.isNull(this.localDbName)&&"new"!=arguments[1]?this.mainDb=JSON.parse(localStorage.getItem(this.localDbName)):this.delDb()}insVal(){var t=arguments.length,e=this.mainDb.length,n=0;if(1==t&&Array.isArray(arguments[0])){var i=arguments[0].length;for(n=0;n<i;n++)this.mainDb[e+n]=arguments[0][n]}else for(n=0;n<t;n++)this.mainDb[e+n]=arguments[n];this.save()}delDb(){this.delAll(),localStorage.removeItem(this.localDbName)}isNull(t){return!!localStorage.getItem(t)}getName(){return this.name}getKeyName(){return this.localDbName}setName(){if("string"==typeof arguments[0]){var t=new localDb(arguments[0]);return t.mainDb=this.mainDb,t.save(),this.delDb(),t}console.error("Changing name failed, Cannot read the argument in the method changeName(String_val)")}length(){return this.mainDb.length}copy(){const t=arguments.length;for(var e=0;e<t;e++)for(var n=0;n<arguments[e].mainDb.length;n++)this.mainDb.push(arguments[e].mainDb[n]);this.save()}makeConditionString(t){function e(t){return`this.mainDb[i]['${t}']`}function n(t){return"+-*/%&|!;=><#".indexOf(t)>=0}for(var i=t+"#",r=[],s=i.length,a="",o=0;o<s;o++)n(i[o])?(a.trim().length>0&&r.push(a.trim()),r.push(i[o]),a=""):a+=i[o];r.pop(),s=r.length;var l="";for(o=0;o<s;o++){a=r[o];Number(a[0])||'"'==a[0]||"'"==a[0]||n(a)||(a=e(a)),l+=a}return l}get(){const len=arguments.length;var sl=Number(arguments[0]);const dbLen=this.mainDb.length;var tmpArr=[],i=0;if(sl>=0||0==len||(arguments[0],1)?sl=sl>dbLen?dbLen:sl:console.error("First parameter(n,...) is get() function Should be a Number (n>=0)"),1==len){if("number"==typeof arguments[0])return this.mainDb[sl];arguments[0];var cond=arguments[0];return this.fromFirst(dbLen,cond)}if(2==len){var fl=arguments[1].toLowerCase();if(sl=sl>dbLen?dbLen:sl,"first"==fl||"last"==fl){if("first"==fl){for(i=0;i<sl;i++)tmpArr.push(this.mainDb[i]);return tmpArr}if("last"==fl){for(i=0;i<sl;i++)tmpArr.push(this.mainDb[dbLen-sl+i]);return tmpArr}}else{var cond=arguments[1],count=0;for(i=0;i<dbLen;i++)if(eval(this.makeConditionString(cond))&&(tmpArr.push(this.mainDb[i]),count++),count>=sl||i==dbLen-1)return tmpArr}}else if(3==len){fl=arguments[1].toLowerCase();var cond=arguments[2];if("first"==fl||"last"==fl);else if(cond=arguments[1],fl=arguments[2].toLowerCase(),"first"!=fl&&"last"!=fl)return console.error("Error in get() Check the arguments in get() function"),tmpArr;if("first"==fl)return this.fromFirst(sl,cond);if("last"==fl)return this.fromLast(sl,cond)}else if(0==len)return this.mainDb}fromLast(num,cond){var tmpArr=[],i;const sl=num,dbLen=this.mainDb.length;for(var count=0,i=dbLen-1;i>=0&&(eval(this.makeConditionString(cond))&&(tmpArr.push(this.mainDb[i]),count++),!(count>=sl||0==i));i--);return tmpArr}fromFirst(num,cond){var tmpArr=[],i;const sl=num,dbLen=this.mainDb.length;for(var count=0,i=0;i<dbLen&&(eval(this.makeConditionString(cond))&&(tmpArr.push(this.mainDb[i]),count++),!(count>=sl||i==dbLen-1));i++);return tmpArr}delAll(){var t=this.mainDb.length;return this.mainDb=[],this.save(),t}del(){const t=arguments.length;var e=arguments[0],n=0,i=0;const r=this.mainDb.length;if(1==t){if("number"==typeof e)return this.deleteByIndex(Number(e));if("string"==typeof e)return this.deleteByCond(e)}else if(2==t){var s=arguments[1].toLowerCase();if(e=e>r?r:e,"first"==s||"last"==s){if("first"==s&&e>=0){for(n=0;n<e;n++)i+=this.deleteByIndex(n);return i}if("last"==s&&e>=0){for(n=r-1;n>=r-e;n--)i+=this.deleteByIndex(n);return i}}}else if(3==t){var a=arguments[1].toLowerCase();e=e>r?r:e,e--;var o=arguments[2];if("first"==a||"last"==a);else if(o=arguments[1],"first"!=(a=arguments[2].toLowerCase())&&"last"!=a)return console.error("Error in delete() Check the arguments in delete() function"),0;if("first"==a)return this.deleteFromFirst(e,o);if("last"==a)return this.deleteFromLast(e,o)}}deleteFromFirst(t,e){return t=Number(t),this.deleteByCond(e,0,t)}deleteFromLast(t,e){t=Number(t);var n=this.mainDb.length;return this.deleteByCond(e,n-t-1,n-1)}deleteByIndex(t){return this.mainDb.splice(t,1),this.save(),1}deleteByCond(cond,startIndex=0,lastIndex=this.mainDb.length-1){for(var count=0,dbLen=this.mainDb.length,tmp=[],i=0;i<dbLen;i++)eval(this.makeConditionString(cond))&&i>=startIndex&&i<=lastIndex?count++:tmp.push(this.mainDb[i]);return this.mainDb=tmp,this.save(),count}updateByConditionNum(cond,apply,count,sf){var i=0,dbLen=this.mainDb.length;count=dbLen>count?count:dbLen;var c=0;if("first"==sf.toLowerCase())for(i=0;i<count;i++)eval(this.makeConditionString(cond))&&(eval(this.makeConditionString(apply)),c++);else{if("last"!=sf.toLowerCase())return console.error("error in update() check the arguments in the update function()"),0;for(i=dbLen-1;i>=dbLen-count;i--)eval(this.makeConditionString(cond))&&(eval(this.makeConditionString(apply)),c++)}return this.save(),c}setAll(t,e){return this.updateByConditionNum(e,t,this.mainDb.length,"first")}set(){var len=arguments.length,dbLen=this.mainDb.length,i;if(1==len||0==len)console.error("Error in update() : Check the arguments update()");else{if(2==len)return"number"==typeof arguments[1]?(i=arguments[1],eval(this.makeConditionString(arguments[0])),this.save(),1):this.updateByConditionNum(arguments[1],arguments[0],dbLen,"first");if(3==len){var cond=arguments[1],apply=arguments[0],s3=arguments[2];return"number"==typeof s3?this.updateByConditionNum(cond,apply,s3,"first"):"first"==s3||"last"==s3?this.updateByConditionNum(cond,apply,dbLen,s3):0}if(4==len){var cond=arguments[1],apply=arguments[0],s3=arguments[2],s4=arguments[3];if("first"==s3||"last"==s3)return this.updateByConditionNum(cond,apply,s4,s3);if("first"==s4||"last"==s4)return this.updateByConditionNum(cond,apply,s3,s4)}}}save(){localStorage.setItem(this.localDbName,JSON.stringify(this.mainDb))}sort(){var t=arguments.length;if(0==t)console.error("Arguments in the sort() method cannot be blank");else if(1==t)this.sortAsc(arguments[0]);else if(2==t){var e=arguments[1].toLowerCase();"asc"==e||"ascending"==e?this.sortAsc(arguments[0]):"des"==e||"descending"==e?this.sortDes(arguments[0]):console.error("Pass correct argument in sort() method")}return this}sortAsc(){const t=arguments.length,e=this.mainDb.length;var n,i;if(1==t)for(n=0;n<e;n++)for(i=n+1;i<e;i++){if(this.mainDb[n][arguments[0]]>this.mainDb[i][arguments[0]]){var r=this.mainDb[n];this.mainDb[n]=this.mainDb[i],this.mainDb[i]=r}}}sortDes(){const t=arguments.length,e=this.mainDb.length;var n,i;if(1==t)for(n=0;n<e;n++)for(i=n+1;i<e;i++){if(this.mainDb[n][arguments[0]]<this.mainDb[i][arguments[0]]){var r=this.mainDb[n];this.mainDb[n]=this.mainDb[i],this.mainDb[i]=r}}}}export default localDb;